# Automatically generated by Pynguin.
import densenet as module_0


def test_case_0():
    try:
        list_0 = []
        int_0 = 30
        float_0 = -1734.9
        var_0 = module_0.DenseNet(list_0, int_0, float_0)
    except BaseException:
        pass


def test_case_1():
    try:
        int_0 = 3016
        int_1 = 721
        float_0 = 0.0001
        bool_0 = False
        var_0 = module_0.dense_block(int_0, int_1, float_0, bool_0)
        var_1 = module_0.DenseNet()
    except BaseException:
        pass


def test_case_2():
    try:
        float_0 = -1016.128
        bytes_0 = b'\x86\x08z#_q'
        int_0 = 2641
        var_0 = module_0.convolution_block(bytes_0, int_0, bytes_0)
        str_0 = None
        list_0 = [str_0]
        tuple_0 = None
        var_1 = module_0.dense_block(float_0, str_0, list_0, tuple_0)
    except BaseException:
        pass


def test_case_3():
    try:
        int_0 = -703
        str_0 = 'AE\x0cJA,s4DV|/tzBA'
        float_0 = 4633.477112
        list_0 = None
        tuple_0 = float_0, list_0
        str_1 = ' '
        complex_0 = None
        bool_0 = True
        int_1 = 3084
        var_0 = module_0.transition_layer(complex_0, bool_0, int_1)
        set_0 = set()
        dict_0 = None
        var_1 = module_0.convolution_block(str_1, set_0, dict_0)
        assert var_0 is None
        assert var_1 is None
        var_2 = module_0.transition_layer(int_0, str_0, tuple_0)
    except BaseException:
        pass


def test_case_4():
    try:
        int_0 = -1185
        var_0 = module_0.convolution_block(int_0, int_0)
        str_0 = '\n&?FkO)a0SP9yu97}{Y}'
        int_1 = 756
        float_0 = -259.2
        float_1 = 1341.2
        var_1 = module_0.DenseNet(str_0, int_1, int_1, int_1, float_0,
            float_0, float_1)
        assert var_0 is None
        assert var_1 is None
        bool_0 = True
        int_2 = -1986
        bool_1 = None
        bool_2 = True
        str_1 = '0|[^t'
        dict_0 = {var_0: bool_2, int_1: var_1, bool_1: bool_0, var_0: str_1}
        list_0 = [bool_2]
        list_1 = [bool_0, float_0, int_1, list_0]
        bool_3 = False
        var_2 = module_0.dense_block(int_2, bool_1, dict_0, list_1, bool_3)
    except BaseException:
        pass


def test_case_5():
    try:
        int_0 = 398
        none_type_0 = None
        dict_0 = {int_0: int_0}
        float_0 = -1464.594689
        set_0 = set()
        tuple_0 = dict_0, float_0, set_0, dict_0
        bool_0 = True
        float_1 = 1790.0
        var_0 = module_0.DenseNet(none_type_0, int_0, int_0, int_0, tuple_0,
            bool_0, float_0, float_1)
    except BaseException:
        pass

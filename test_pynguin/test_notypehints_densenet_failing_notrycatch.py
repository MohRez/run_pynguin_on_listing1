# Automatically generated by Pynguin.
import densenet as module_0


# Not spurious since the exception is raised inside the function DenseNet.
# and wrong input types.
def test_case_0():
    str_0 = '5+oVOqTyoA'
    var_0 = module_0.DenseNet(str_0)


# Spurious
# and wrong input types.
def test_case_1():
    float_0 = -1201.331721106105
    str_0 = '3X)'
    bytes_0 = b'\xa8\xf8V\xba\x98\xd4\xd1O\xf8\x80\xc3B\xb6\x81\xc7\xcf'
    var_0 = module_0.DenseNet(float_0, str_0, str_0, str_0, bytes_0)


# def test_case_2():
#     int_0 = None
#     complex_0 = None
#     bool_0 = True
#     int_1 = None
#     list_0 = [complex_0]
#     var_0 = module_0.dense_block(complex_0, bool_0, int_1, bool_0,
#                                  list_0, int_0)


# Not spurious since the exception is raised inside the function DenseNet.
# and wrong input types.
def test_case_3():
    bool_0 = False
    dict_0 = {}
    var_0 = module_0.convolution_block(bool_0, dict_0, dict_0)
    assert var_0 is None
    bool_1 = False
    list_0 = []
    bytes_0 = b'J'
    bytes_1 = None
    set_0 = {var_0, bool_1}
    float_0 = -3356.543498
    var_1 = module_0.dense_block(set_0, bool_1, bytes_0, float_0)
    assert var_1 == ({False, None}, b'J')
    bytes_2 = b'\x10Px\x8d'
    var_2 = module_0.DenseNet(bytes_0, bytes_1, list_0, bytes_2, list_0)


# def test_case_4():
#     str_0 = 'Tfv1<GZdYYO<:.W/)'
#     float_0 = -1480.697155
#     bool_0 = True
#     bytes_0 = b''
#     tuple_0 = bytes_0,
#     list_0 = [tuple_0]
#     var_0 = module_0.transition_layer(str_0, bool_0, list_0)
#     str_1 = ';B$ua:l($Nf1&=(o+\n'
#     list_1 = None
#     var_1 = module_0.transition_layer(str_1, str_0, list_1, float_0)


# def test_case_5():
#     float_0 = 657.502
#     int_0 = -3591
#     var_0 = module_0.transition_layer(float_0, int_0)
#     str_0 = "\nH't"
#     str_1 = None
#     int_1 = -1326
#     set_0 = set()
#     dict_0 = {}
#     tuple_0 = int_1, set_0, dict_0, dict_0
#     tuple_1 = str_1, tuple_0
#     float_1 = 3597.695096
#     list_0 = [set_0, tuple_1, str_1, float_1]
#     float_2 = -2503.72
#     var_1 = module_0.transition_layer(str_0, tuple_1, list_0, int_0,
#                                       float_2)

# Not spurious since the exception is raised inside the function DenseNet.
# and wrong input types.
def test_case_6():
    list_0 = []
    bytes_0 = None
    var_0 = module_0.DenseNet(bytes_0, bytes_0, list_0, bytes_0, list_0)


# Spurious
# and wrong input types.
def test_case_7():
    bool_0 = False
    float_0 = -1204.0
    float_1 = 111.64921
    str_0 = '~tn'
    int_0 = 1172
    var_0 = module_0.DenseNet(float_1, bool_0, float_0, str_0, int_0)


# Not spurious since the exception is raised inside the function DenseNet.
# and wrong input types.
def test_case_8():
    bool_0 = False
    dict_0 = {}
    var_0 = module_0.convolution_block(bool_0, dict_0, dict_0)
    assert var_0 is None
    list_0 = []
    float_0 = 0.0
    str_0 = 'Poj@TO@=XNgM$'
    complex_0 = None
    str_1 = "i'Xq>U"
    var_1 = module_0.convolution_block(float_0, str_0, complex_0, str_1)
    assert var_1 is None
    float_1 = 318.225465
    var_2 = module_0.DenseNet(list_0, float_1)


# Spurious
# and wrong input types.
def test_case_9():
    str_0 = '(oK0P|v+"\rPbI_>0ak!L'
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, str_0, dict_0, dict_0]
    float_0 = 1047.56826
    var_0 = module_0.convolution_block(dict_0, list_0, str_0, float_0)
    assert var_0 is None
    bool_0 = True
    dict_1 = {}
    var_1 = module_0.convolution_block(bool_0, dict_1, dict_1)
    assert var_1 is None
    float_1 = -1204.0
    float_2 = 111.64921
    int_0 = 1172
    var_2 = module_0.DenseNet(float_2, bool_0, float_1, str_0, int_0)


# Spurious
# and wrong input types.
def test_case_10():
    bool_0 = False
    dict_0 = {}
    var_0 = module_0.convolution_block(bool_0, dict_0, dict_0)
    assert var_0 is None
    bool_1 = False
    bytes_0 = b'J'
    str_0 = 'KAl#"Gz/'
    str_1 = '3X)'
    set_0 = {var_0, bool_1}
    float_0 = -3356.543498
    var_1 = module_0.dense_block(set_0, bool_1, bytes_0, float_0)
    assert var_1 == ({False, None}, b'J')
    int_0 = 314
    var_2 = module_0.DenseNet(int_0, int_0, str_1, str_0, dict_0)
